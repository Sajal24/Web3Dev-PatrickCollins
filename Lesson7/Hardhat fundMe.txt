It's so much fun to code smart contracts yo!


LINTING
solhint - solidity linter - linting is a process of running a program that will analyse code for potential errors - will give warnings and errors and best practices to write and format our code
    yarn hardhat solhint contracts/*.sol



HARDHAT DEPLOY
keeping track of all of our deploys can get tricky- so install a package called hardhat-deploy - a hardhat plugin for replicable deployments and easy testing
    the 2 evergreen process for downloading any package/plugin:
    1. yarn add --dev hardhat-deploy
    2. require("hardhat-deploy")             in the hardhat config file

now delete the deploy file from scripts folder, and we will create a new deploy folder - and we will be writing our scripts here - and our yarn hardhat deploy will look here for modules - i.e, whenever we will run yarn hardhat deploy, all the scripts in the folder deploy will get run.

    also, just add one more package (need to override the hardhat-ethers package with hardhat-deploy-ethers)

    yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers

    this will enable ethers to keep track of every deployment

 now the deploy function traditionally was like:
    //import
    //define main function
    //call main function

but now, it will look like (given in the hardhat-deploy script)
    after running the function yarn hardhat deploy - the hardhat passes a hre object to the async function as a parameter, from which we obtain the things we need using destructuring of arrays.
    
    module.exports = async ({ getNamedAccounts, deployments }) => {
        const { deploy, log } = deployments
        const { deployer } = await getNamedAccounts()
        const chainId = network.config.chainId
    }

    //we use namedAccounts, a method  given by the ethers library to easily game name to those different private key spots, mentioned in the network section of config file

    so, in config file
    namedAccounts: {
        deployer: {
            default: 0,
            //different network mai different position:
            31337: 1,
        },
    },
 


MOCKING & HELPER-HARDHAT-CONFIG
 we would want to deploy to the testnet as our last option coz its very slow, or only for testing - better to deploy on local network before

 so, our current fundme.sol includes use of chainlink price feeds, that has a contract address hardcoded - and if we playing on our local hardhat node, no chainlink oracles are monitoring it, unlike testnets, so how can we work with price feeds or hard coded data here???
 solution - mocking

Mocking -> An object under test may have dependencies on other (complex) objects. To isolate the behaviour of the object you want to test you replace the other objects by mocks that simulate the behaviour of the real objects. This is useful if the real objects are impractical to incorporate into the unit test.

In short, mocking is creating objects that simulate the behaviour of real objects.

 so, when going for localhost or hardhat network, we want to use a mock


 we will use aave protocol here for that functionality - x chain - y address
                                                       - z chain - a address

    make a new file - helper-hardhat-config
    then do this:



**IMP THING: 
    this: 
    const {helperConfig} = require("../helper-hardhat-config")

    is same as:
    const networkConfig = require("../helper-hardhat-config")  //networkConfig takes the whole file
    const helperConfig = networkConfig.helperConfig
