Its going to be superrrr fun!!!
It is the flagship project, if you learn this, then you have the skills to learn all the rest of the smart contract concepts 

HARDHAT SETUP
    yarn init
    yarn add --dev hardhat
    yarn hardhat > select a empty hardhat file, then copy the dependancies from source code(you can see what dependancies we installed in package.json file)

    then copy paste dependancies from the fcc github:

    yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers @nomiclabs/hardhat-etherscan @nomiclabs/hardhat-waffle chai ethereum-waffle hardhat hardhat-contract-sizer hardhat-deploy hardhat-gas-reporter prettier prettier-plugin-solidity solhint solidity-coverage dotenv



RAFFLE.SOL SETUP
Now always comment and write in the start of your contract that what are you building - break them down into small goals/fncs

now entranceFee variable, with a visibility and make it storage variable first with adding the prefix "s_" with it
now we will set it every time a contract is deployed, so let's make it immutable by changing its name as - "i_entranceFee" and adding the keyword immutable at the this variable's declaration.

Now using the Chainlink Solidity Style Guide, we should return this entranceFee, as in users should be able to see it, so defining a function at last that returns this enterance fees.

Now in enterRaffle function, we need to do same as in fund function, that is require that msg.value<enterance fee, but let's do it in a more gas optimizing way using custom error, instead of require statements and storing that big string as our revert message.

NOW declare a players array and make it payable as we'll be paying the winner.